#+TITLE: traffic_simulator
#+SUBTITLE:
#+DESCRIPTION:
#+AUTHOR: William Sena <@wllsena>
#+EMAIL: wllsena@protonmail.com
#+LANGUAGE: pt-BR
#+STARTUP: latexpreview
#+PROPERTY: header-args :session *code* :results value :exports both :cache yes

[[./demo.png]]


* Classes

** Crossing(index: int)

Cruzamento entre duas ruas com parâmetro index.

*** Método add_street(street: int) -> None

Adiciona a rua de index **street** ao cruzamento.

*** Método to_cross(street: int, new_street: int) -> None

Permite o cruzamento de um carro. Primeiro trava o lock self.lock, significa que somente um carro pode decidir fazer o cruzamento por vez, em diante trava os locks correspondentes da ruas de origem de index **street** e de destino de index **new_street**, então destrava o lock inicial e somente depois destrava os locks das ruas, significa que o cruzamento foi feito. Mais de um carro podem fazer o cruzamento em paralelo caso não aja conflito de locks das ruas.

** Street(index: int, size: int, crossings: Tuple[int, int], capacities: Tuple[int, int])

Rua com parâmetros index, tamanho da rua, tupla com o indexes dos cruzamento esquerdo e do direito e tupla com as capacidades das vias esquerda e direita.

*** Método enter(direction: int) -> bool

Permite a entrada de um carro. Primeiro trava o lock self.lock, significa que somente um carro pode decidir entrar ou sair da rua por vez, então checa se a população da rua na via **direction** é menor que sua capacidade, se sim aumenta o população da via em 1 e retorna True, caso contrário somente retorna False.

*** Método exit(direction: int) -> bool

Permite a saída de um carro. Primeiro trava o lock self.lock, significa que somente um carro pode decidir entrar ou sair na rua por vez, então diminui a população da via **direction** em 1 e retorna True.

** Car(index: int, on_Street: int, direction: int, get_velocity: Callable[[], int])

Carro com parâmetros index, index de sua rua inicial, direção (via) inicial e função que retorna uma nova velocidade para o carro.

*** Método update(crossings: List[Crossing], streets: List[Street])  -> Optional[car_result]

Atualiza a posição de um carro. A entrada são as listas de todos os cruzamentos e todas as ruas. Primeiro checa se sua posição na rua é igual ao tamanho da rua, se não for, adiciona a velocidade do carro à sua posição, se sim, escolhe uma das ruas dentro do cruzamento, então checa se é possível entrar na rua (método enter da rua), se não for, mantém essa rua como destino para a próxima atualização, se for, efetua o cruzamento no seu tempo (método to_cross do cruzamento correspondente) e entra na nova rua. Se entrar em uma rua terminal retorna None.

** City(n_processes: int, n_crossing: int, prob_edge_creat: float, n_terminal_streets: int, n_init_cars: int, get_new_cars: Callable[[], int], get_size: Callable[[], int], get_capacities: Callable[[], Tuple[int, int]], get_velocity: Callable[[], int])

Cidade com parâmetros número de processos, número de cruzamentos, a probabilidade e criar uma rua entre 2 cruzamentos, número de ruas terminais - onde surgem e desaparecem os carros - número de carros iniciais, função para obter o número de novos carros por atualização, função para obter o tamanho de uma nova rua, função para obter a capacidade de uma nova rua e função para obter a nova velocidade de um carro. Quando o objeto é criado um grafo aleatório é criado e cria os cruzamentos, as ruas e os carros iniciais.

*** Método add_car() -> None

Adiciona um novo carro a uma rua terminal aleatória.

*** Método update(_) -> List[car_result]

É rodado por um determinado processo. Dentro de um loop, trava o lock self.lock, obtém o index do próximo carro disponível e destrava o lock. Se não tiver carro com esse index retorna o resultado de todas as atualizações de carros rodadas por esse processo, se tiver, faz a atualização do carro correspondente. Carros que retornarem None São descartados posteriormente.

*** Método run() -> city_result

Cria n processos cada um executando self.update, concatena os resultados e retorna o resultado final da atualização.

*** draw() -> None

Desenha o grafo utilizando matplotlib.

* Tipos de resultados:

*** car_result = Tuple[int, int, int, int]
(index, on_street, velocity, odometer)

Saída da atualização de um carro.

*** city_result = Tuple[str, int, int, int, List[car_result]]
(index, n_crossing, n_streets, n_cars, car_results)

Saída da atualização de uma cidade.
